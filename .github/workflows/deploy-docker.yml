# Tên của quy trình CI/CD
name: Build and Deploy React App with Docker

# Điều kiện để kích hoạt quy trình
on:
  push:
    branches: [ "develop" ]

jobs:
  ##########################################################
  # JOB 1: BUILD, TEST VÀ PUSH IMAGE LÊN DOCKER HUB        #
  ##########################################################
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Cache các gói npm để tăng tốc
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        # Thêm -- --watch=false nếu trình test của bạn chạy ở chế độ watch theo mặc định
        run: npm test -- --watch=false

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          cache-from: type=gha # Bật cache đọc từ GitHub Actions

  ##########################################################
  # JOB 2: DEPLOY IMAGE LÊN MÁY CHỦ (VPS)                  #
  ##########################################################
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Copy docker-compose.yml to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.yml"
          target: "${{ secrets.DOCKER_DEPLOY_PATH }}"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ${{ secrets.DOCKER_DEPLOY_PATH }}
            
            # Xây dựng tên image đầy đủ và chính xác từ tag của job build
            FULL_IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest"
            
            # Ghi tên image vào file .env để docker-compose đọc
            echo "DOCKER_IMAGE=${FULL_IMAGE_NAME}" > .env
            
            echo "Deploying image: ${FULL_IMAGE_NAME}"
            
            # Đăng nhập vào Docker Hub trên VPS
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Kéo image mới về và khởi động lại dịch vụ
            docker-compose pull
            docker-compose up -d --remove-orphans
            
            # Dọn dẹp các image cũ không còn được sử dụng
            docker image prune -af

  ################################
  # JOB GỬI THÔNG BÁO TELEGRAM  #
  ################################
  notify:
    # Luôn chạy job này, không quan trọng kết quả của các job trước
    if: always()
    
    # Chờ cho cả 2 job 'build' và 'deploy' hoàn thành
    needs: [build, deploy]
    
    runs-on: ubuntu-latest
    steps:
      - name: Send notification
        run: |
          if [[ ${{ needs.deploy.result }} == 'success' ]]; then
            STATUS="✅ *CI/CD THÀNH CÔNG* [Docker]"
            # Dùng \` để vô hiệu hóa dấu backtick
            MESSAGE="*Repository:* \`${{ github.repository }}\`"
          else
            STATUS="❌ *CI/CD THẤT BẠI* [Docker]"
            MESSAGE="*Repository:* \`${{ github.repository }}\`%0A"
            MESSAGE+="*Xem chi tiết tại:* [Link to Action](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          fi

          # -- Dựng nội dung tin nhắn --
          # Dùng \` ở đây nữa
          TEXT="$STATUS%0A%0A*Commit:* \`${{ github.sha }}\`%0A$MESSAGE"

          # -- Gửi tin nhắn qua Telegram API --
          # Sử dụng -d cho từng tham số để tránh lỗi cú pháp phức tạp
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$TEXT" \
            -d parse_mode="MarkdownV2"
